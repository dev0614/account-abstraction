{
  "address": "0x12411b95Ef5AEC210De6B4548d1C316178F7F18A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_create2factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_paymasterStake",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_unstakeDelaySec",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "opIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "FailedOp",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTime",
          "type": "uint256"
        }
      ],
      "name": "DepositUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeDelaySec",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "PaymasterPostOpFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualGasPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "UserOperationEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "revertReason",
          "type": "bytes"
        }
      ],
      "name": "UserOperationRevertReason",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_unstakeDelaySec",
          "type": "uint32"
        }
      ],
      "name": "addStakeTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "create2factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "amount",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "unstakeDelaySec",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "withdrawTime",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDepositInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "amount",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "unstakeDelaySec",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "withdrawTime",
              "type": "uint64"
            }
          ],
          "internalType": "struct StakeManager.DepositInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "paymasters",
          "type": "address[]"
        }
      ],
      "name": "getPaymastersStake",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_stakes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymaster",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "paymasterData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "getRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initCode",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_salt",
          "type": "uint256"
        }
      ],
      "name": "getSenderAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymaster",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "paymasterData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "op",
          "type": "tuple"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "handleOp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymaster",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "paymasterData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation[]",
          "name": "ops",
          "type": "tuple[]"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "handleOps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymaster",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "paymasterData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "op",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "preOpGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prefund",
          "type": "uint256"
        },
        {
          "internalType": "enum EntryPoint.PaymentMode",
          "name": "paymentMode",
          "type": "uint8"
        }
      ],
      "name": "internalHandleOp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isContractDeployed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "isPaymasterStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "requiredStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredDelaySec",
          "type": "uint256"
        }
      ],
      "name": "isStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymasterStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymaster",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "paymasterData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "simulateValidation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "preOpGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prefund",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeDelaySec",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8e7a1a40bbd7aadc0c949cbbd91120be2d2dbcf20a25530db4e9ac2543bbbebf",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xd21934eD8eAf27a67f0A70042Af50A1D6d195E81",
    "contractAddress": null,
    "transactionIndex": 50,
    "gasUsed": "2457584",
    "logsBloom": "0x
    "blockHash": "0x9c007870508db85cfc8625eda35dc722cee821ef1b62e040328acb9527e297fe",
    "transactionHash": "0x8e7a1a40bbd7aadc0c949cbbd91120be2d2dbcf20a25530db4e9ac2543bbbebf",
    "logs": [],
    "blockNumber": 6229016,
    "cumulativeGasUsed": "6075430",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xce0042B868300000d44A59004Da54A005ffdcf9f",
    "1000000000000000000",
    100
  ],
  "solcInputHash": "ca8360c2ec2d44ef9859dfd0bed61fc1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_create2factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_paymasterStake\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedOp\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"DepositUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"PaymasterPostOpFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"UserOperationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"UserOperationRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStakeTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create2factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"withdrawTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"withdrawTime\",\"type\":\"uint64\"}],\"internalType\":\"struct StakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"paymasters\",\"type\":\"address[]\"}],\"name\":\"getPaymastersStake\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_stakes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"getRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"getSenderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"op\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"op\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"enum EntryPoint.PaymentMode\",\"name\":\"paymentMode\",\"type\":\"uint8\"}],\"name\":\"internalHandleOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContractDeployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"isPaymasterStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requiredStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredDelaySec\",\"type\":\"uint256\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymasterStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"simulateValidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeDelaySec\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStakeTo(address,uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock time before the deposit can be withdrawn.\"}},\"constructor\":{\"params\":{\"_create2factory\":\"- contract to \\\"create2\\\" wallets (not the EntryPoint itself, so that it can be upgraded)\",\"_paymasterStake\":\"- locked stake of paymaster (actual value should also cover TX cost)\",\"_unstakeDelaySec\":\"- minimum time (in seconds) a paymaster stake must be locked\"}},\"handleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes),address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"op\":\"the operation to execute\"}},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"ops\":\"the operations to execute\"}},\"isStaked(address,uint256,uint256)\":{\"params\":{\"account\":\"the account (paymaster) to check\",\"requiredDelaySec\":\"the minimum required stake time.\",\"requiredStake\":\"the minimum deposit\"}},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes))\":{\"details\":\"The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the wallet's data.      In order to split the running opcodes of the wallet (validateUserOp) from the paymaster's validatePaymasterUserOp,      it should look for the NUMBER opcode at depth=1 (which itself is a banned opcode)\",\"returns\":{\"preOpGas\":\"total gas used by validation (including contract creation)\",\"prefund\":\"the amount the wallet had to prefund (zero in case a paymaster pays)\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DepositUnstaked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"}},\"kind\":\"user\",\"methods\":{\"addStakeTo(address,uint32)\":{\"notice\":\"stake the account's deposit. any pending unstakeDeposit is first cancelled. can also set (or increase) the deposit with call.\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"deposits(address)\":{\"notice\":\"maps accounts to their deposits\"},\"getRequestId((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes))\":{\"notice\":\"generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature).\"},\"getSenderAddress(bytes,uint256)\":{\"notice\":\"Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\"},\"handleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes),address)\":{\"notice\":\"Execute the given UserOperation.\"},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation.\"},\"isStaked(address,uint256,uint256)\":{\"notice\":\"check if the given account is staked and didn't unlock it yet.\"},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes))\":{\"notice\":\"Simulate a call to wallet.validateUserOp and paymaster.validatePaymasterUserOp. Validation succeeds of the call doesn't revert.\"},\"unstakeDelaySec()\":{\"notice\":\"minimum number of blocks to after 'unlock' before amount can be withdrawn.\"},\"unstakeDeposit()\":{\"notice\":\"attempt to unstake the deposit. the value can be withdrawn (using withdrawTo) after the unstake delay.\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit. will fail if the deposit is already staked or too low. after a paymaster unlocks and withdraws some of the value, it must call addStake() to stake the value again.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EntryPoint.sol\":\"EntryPoint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/EntryPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"./StakeManager.sol\\\";\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IWallet.sol\\\";\\nimport \\\"./IPaymaster.sol\\\";\\n\\ninterface ICreate2Deployer {\\n    function deploy(bytes memory _initCode, bytes32 _salt) external returns (address);\\n}\\n\\ncontract EntryPoint is StakeManager {\\n\\n    using UserOperationLib for UserOperation;\\n\\n    enum PaymentMode {\\n        paymasterStake, // if paymaster is set, use paymaster's stake to pay.\\n        walletStake // pay with wallet deposit.\\n    }\\n\\n    uint public immutable paymasterStake;\\n    address public immutable create2factory;\\n\\n    event UserOperationEvent(bytes32 indexed requestId, address indexed sender, address indexed paymaster, uint nonce, uint actualGasCost, uint actualGasPrice, bool success);\\n    event UserOperationRevertReason(bytes32 indexed requestId, address indexed sender, uint nonce, bytes revertReason);\\n\\n    event PaymasterPostOpFailed(bytes32 indexed requestId, address indexed sender, address indexed paymaster, uint nonce, bytes reason);\\n\\n    //handleOps reverts with this error struct, to mark the offending op\\n    // NOTE: if simulateOp passes successfully, there should be no reason for handleOps to fail on it.\\n    // @param opIndex - index into the array of ops to the failed one (in simulateOp, this is always zero)\\n    // @param paymaster - if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,\\n    //      this value will be zero (since it failed before accessing the paymaster)\\n    // @param reason - revert reason\\n    //  only to aid troubleshooting of wallet/paymaster reverts\\n    error FailedOp(uint opIndex, address paymaster, string reason);\\n\\n    /**\\n     * @param _create2factory - contract to \\\"create2\\\" wallets (not the EntryPoint itself, so that it can be upgraded)\\n     * @param _paymasterStake - locked stake of paymaster (actual value should also cover TX cost)\\n     * @param _unstakeDelaySec - minimum time (in seconds) a paymaster stake must be locked\\n     */\\n    constructor(address _create2factory, uint _paymasterStake, uint32 _unstakeDelaySec) StakeManager(_unstakeDelaySec) {\\n        create2factory = _create2factory;\\n        paymasterStake = _paymasterStake;\\n    }\\n\\n    /**\\n     * Execute the given UserOperation.\\n     * @param op the operation to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOp(UserOperation calldata op, address payable beneficiary) public {\\n\\n        uint preGas = gasleft();\\n\\n        bytes32 requestId = getRequestId(op);\\n        (uint256 prefund, PaymentMode paymentMode, bytes memory context) = _validatePrepayment(0, op, requestId);\\n        uint preOpGas = preGas - gasleft() + op.preVerificationGas;\\n\\n        uint actualGasCost;\\n\\n        try this.internalHandleOp(op, requestId, context, preOpGas, prefund, paymentMode) returns (uint _actualGasCost) {\\n            actualGasCost = _actualGasCost;\\n        } catch {\\n            uint actualGas = preGas - gasleft() + preOpGas;\\n            actualGasCost = handlePostOp(IPaymaster.PostOpMode.postOpReverted, op, requestId, context, actualGas, prefund, paymentMode);\\n        }\\n\\n        compensate(beneficiary, actualGasCost);\\n    }\\n\\n    function compensate(address payable beneficiary, uint amount) internal {\\n        (bool success,) = beneficiary.call{value : amount}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) public {\\n\\n        uint opslen = ops.length;\\n        uint256[] memory preOpGas = new uint256[](opslen);\\n        bytes32[] memory contexts = new bytes32[](opslen);\\n        uint256[] memory prefunds = new uint256[](opslen);\\n        bytes32[] memory requestIds = new bytes32[](opslen);\\n        PaymentMode[] memory paymentModes = new PaymentMode[](opslen);\\n\\n        for (uint i = 0; i < opslen; i++) {\\n            uint preGas = gasleft();\\n            UserOperation calldata op = ops[i];\\n\\n            bytes memory context;\\n            bytes32 contextOffset;\\n            bytes32 requestId = getRequestId(op);\\n            (prefunds[i], paymentModes[i], context) = _validatePrepayment(i, op, requestId);\\n            assembly {contextOffset := context}\\n            contexts[i] = contextOffset;\\n            preOpGas[i] = preGas - gasleft() + op.preVerificationGas;\\n            requestIds[i] = requestId;\\n        }\\n\\n        uint collected = 0;\\n\\n        for (uint i = 0; i < ops.length; i++) {\\n            uint preGas = gasleft();\\n            UserOperation calldata op = ops[i];\\n            bytes32 contextOffset = contexts[i];\\n            bytes memory context;\\n            assembly {context := contextOffset}\\n            uint preOpGasi = preOpGas[i];\\n            uint prefundi = prefunds[i];\\n            bytes32 requestIdi = requestIds[i];\\n            PaymentMode paymentModei = paymentModes[i];\\n\\n            try this.internalHandleOp(op, requestIdi, context, preOpGasi, prefundi, paymentModei) returns (uint _actualGasCost) {\\n                collected += _actualGasCost;\\n            } catch {\\n                uint actualGas = preGas - gasleft() + preOpGasi;\\n                collected += handlePostOp(IPaymaster.PostOpMode.postOpReverted, op, requestIdi, context, actualGas, prefundi, paymentModei);\\n            }\\n        }\\n\\n        compensate(beneficiary, collected);\\n    }\\n\\n    function internalHandleOp(UserOperation calldata op, bytes32 requestId, bytes calldata context, uint preOpGas, uint prefund, PaymentMode paymentMode) external returns (uint actualGasCost) {\\n        uint preGas = gasleft();\\n        require(msg.sender == address(this));\\n\\n        IPaymaster.PostOpMode mode = IPaymaster.PostOpMode.opSucceeded;\\n        if (op.callData.length > 0) {\\n\\n            (bool success,bytes memory result) = address(op.getSender()).call{gas : op.callGas}(op.callData);\\n            if (!success) {\\n                if (result.length > 0) {\\n                    emit UserOperationRevertReason(requestId, op.getSender(), op.nonce, result);\\n                }\\n                mode = IPaymaster.PostOpMode.opReverted;\\n            }\\n        }\\n\\n        uint actualGas = preGas - gasleft() + preOpGas;\\n        return handlePostOp(mode, op, requestId, context, actualGas, prefund, paymentMode);\\n    }\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature).\\n     */\\n    function getRequestId(UserOperation calldata userOp) public view returns (bytes32) {\\n        return keccak256(abi.encode(userOp.hash(), address(this), block.chainid));\\n    }\\n\\n    /**\\n    * Simulate a call to wallet.validateUserOp and paymaster.validatePaymasterUserOp.\\n    * Validation succeeds of the call doesn't revert.\\n    * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the wallet's data.\\n     *      In order to split the running opcodes of the wallet (validateUserOp) from the paymaster's validatePaymasterUserOp,\\n     *      it should look for the NUMBER opcode at depth=1 (which itself is a banned opcode)\\n     * @return preOpGas total gas used by validation (including contract creation)\\n     * @return prefund the amount the wallet had to prefund (zero in case a paymaster pays)\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external returns (uint preOpGas, uint prefund) {\\n        uint preGas = gasleft();\\n\\n        bytes32 requestId = getRequestId(userOp);\\n        (prefund,,) = _validatePrepayment(0, userOp, requestId);\\n        preOpGas = preGas - gasleft() + userOp.preVerificationGas;\\n\\n        require(msg.sender == address(0), \\\"must be called off-chain with from=zero-addr\\\");\\n    }\\n\\n    function getPaymentInfo(UserOperation calldata userOp) internal view returns (uint requiredPrefund, PaymentMode paymentMode) {\\n        requiredPrefund = userOp.requiredPreFund();\\n        if (userOp.hasPaymaster()) {\\n            paymentMode = PaymentMode.paymasterStake;\\n        } else {\\n            paymentMode = PaymentMode.walletStake;\\n        }\\n    }\\n\\n    // create the sender's contract if needed.\\n    function _createSenderIfNeeded(UserOperation calldata op) internal {\\n        if (op.initCode.length != 0) {\\n            // note that we're still under the gas limit of validate, so probably\\n            // this create2 creates a proxy account.\\n            // @dev initCode must be unique (e.g. contains the signer address), to make sure\\n            //   it can only be executed from the entryPoint, and called with its initialization code (callData)\\n            address sender1 = ICreate2Deployer(create2factory).deploy(op.initCode, bytes32(op.nonce));\\n            require(sender1 != address(0), \\\"create2 failed\\\");\\n            require(sender1 == op.getSender(), \\\"sender doesn't match create2 address\\\");\\n        }\\n    }\\n\\n    /// Get counterfactual sender address.\\n    ///  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n    function getSenderAddress(bytes memory initCode, uint _salt) public view returns (address) {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                bytes1(0xff),\\n                address(create2factory),\\n                _salt,\\n                keccak256(initCode)\\n            )\\n        );\\n\\n        // NOTE: cast last 20 bytes of hash to address\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    //call wallet.validateUserOp, and validate that it paid as needed.\\n    // return actual value sent from wallet to \\\"this\\\"\\n    function _validateWalletPrepayment(uint opIndex, UserOperation calldata op, bytes32 requestId, uint requiredPrefund, PaymentMode paymentMode) internal returns (uint gasUsedByValidateUserOp, uint prefund) {\\n        uint preGas = gasleft();\\n        _createSenderIfNeeded(op);\\n        uint missingWalletFunds = 0;\\n        address sender = op.getSender();\\n        if (paymentMode != PaymentMode.paymasterStake) {\\n            uint bal = balanceOf(sender);\\n            missingWalletFunds = bal > requiredPrefund ? 0 : requiredPrefund - bal;\\n        }\\n        try IWallet(sender).validateUserOp{gas : op.verificationGas}(op, requestId, missingWalletFunds) {\\n        } catch Error(string memory revertReason) {\\n            revert FailedOp(opIndex, address(0), revertReason);\\n        } catch {\\n            revert FailedOp(opIndex, address(0), \\\"\\\");\\n        }\\n        if (paymentMode != PaymentMode.paymasterStake) {\\n            if (requiredPrefund > balanceOf(sender)) {\\n                revert FailedOp(opIndex, address(0), \\\"wallet didn't pay prefund\\\");\\n            }\\n            internalDecrementDeposit(sender, requiredPrefund);\\n            prefund = requiredPrefund;\\n        } else {\\n            prefund = 0;\\n        }\\n        gasUsedByValidateUserOp = preGas - gasleft();\\n    }\\n\\n    //validate paymaster.validatePaymasterUserOp\\n    function _validatePaymasterPrepayment(uint opIndex, UserOperation calldata op, bytes32 requestId, uint requiredPreFund, uint gasUsedByValidateUserOp) internal view returns (bytes memory context, uint gasUsedByPayForOp) {\\n        uint preGas = gasleft();\\n        if (!isValidStake(op, requiredPreFund)) {\\n            revert FailedOp(opIndex, op.paymaster, \\\"not enough stake\\\");\\n        }\\n        //no pre-pay from paymaster\\n        uint gas = op.verificationGas - gasUsedByValidateUserOp;\\n        try IPaymaster(op.paymaster).validatePaymasterUserOp{gas : gas}(op, requestId, requiredPreFund) returns (bytes memory _context){\\n            context = _context;\\n        } catch Error(string memory revertReason) {\\n            revert FailedOp(opIndex, op.paymaster, revertReason);\\n        } catch {\\n            revert FailedOp(opIndex, op.paymaster, \\\"\\\");\\n        }\\n        gasUsedByPayForOp = preGas - gasleft();\\n    }\\n\\n    function _validatePrepayment(uint opIndex, UserOperation calldata userOp, bytes32 requestId) private returns (uint prefund, PaymentMode paymentMode, bytes memory context){\\n\\n        uint preGas = gasleft();\\n        uint gasUsedByValidateUserOp;\\n        uint requiredPreFund;\\n        (requiredPreFund, paymentMode) = getPaymentInfo(userOp);\\n\\n        (gasUsedByValidateUserOp, prefund) = _validateWalletPrepayment(opIndex, userOp, requestId, requiredPreFund, paymentMode);\\n\\n        //a \\\"marker\\\" where wallet opcode validation is done, by paymaster opcode validation is about to start\\n        // (used only by off-chain simulateValidation)\\n        uint marker = block.number;\\n        (marker);\\n\\n        uint gasUsedByPayForOp = 0;\\n        if (paymentMode == PaymentMode.paymasterStake) {\\n            (context, gasUsedByPayForOp) = _validatePaymasterPrepayment(opIndex, userOp, requestId, requiredPreFund, gasUsedByValidateUserOp);\\n        } else {\\n            context = \\\"\\\";\\n        }\\n        uint gasUsed = preGas - gasleft();\\n\\n        if (userOp.verificationGas < gasUsed) {\\n            revert FailedOp(opIndex, userOp.paymaster, \\\"Used more than verificationGas\\\");\\n        }\\n    }\\n\\n    function getPaymastersStake(address[] calldata paymasters) external view returns (uint[] memory _stakes) {\\n        _stakes = new uint[](paymasters.length);\\n        for (uint i = 0; i < paymasters.length; i++) {\\n            _stakes[i] = deposits[paymasters[i]].amount;\\n        }\\n    }\\n\\n    function handlePostOp(IPaymaster.PostOpMode mode, UserOperation calldata op, bytes32 requestId, bytes memory context, uint actualGas, uint prefund, PaymentMode paymentMode) private returns (uint actualGasCost) {\\n        uint preGas = gasleft();\\n        uint gasPrice = UserOperationLib.gasPrice(op);\\n        actualGasCost = actualGas * gasPrice;\\n        if (paymentMode != PaymentMode.paymasterStake) {\\n            if (prefund < actualGasCost) {\\n                revert (\\\"wallet prefund below actualGasCost\\\");\\n            }\\n            uint refund = prefund - actualGasCost;\\n            internalIncrementDeposit(op.getSender(), refund);\\n        } else {\\n            if (context.length > 0) {\\n                if (mode != IPaymaster.PostOpMode.postOpReverted) {\\n                    IPaymaster(op.paymaster).postOp(mode, context, actualGasCost);\\n                } else {\\n                    //paymaster.postOp reverts again (after internalHandleOp was reverted)\\n                    // - emit a message (just for sake of debugging of this poor paymaster)\\n                    // - paymaster still pays (from its stake)\\n                    try IPaymaster(op.paymaster).postOp(mode, context, actualGasCost) {}\\n                    catch (bytes memory errdata) {\\n                        emit PaymasterPostOpFailed(requestId, op.getSender(), op.paymaster, op.nonce, errdata);\\n                    }\\n                }\\n            }\\n            //paymaster pays for full gas, including for postOp (and revert event)\\n            actualGas += preGas - gasleft();\\n            actualGasCost = actualGas * gasPrice;\\n            //paymaster balance known to be high enough, and to be locked for this block\\n            internalDecrementDeposit(op.paymaster, actualGasCost);\\n        }\\n        bool success = mode == IPaymaster.PostOpMode.opSucceeded;\\n        emit UserOperationEvent(requestId, op.getSender(), op.paymaster, op.nonce, actualGasCost, gasPrice, success);\\n    }\\n\\n    //validate a paymaster has enough stake (including for payment for this TX)\\n    // NOTE: when submitting a batch, caller has to make sure a paymaster has enough stake to cover\\n    // all its transactions in the batch.\\n    function isValidStake(UserOperation calldata userOp, uint requiredPreFund) internal view returns (bool) {\\n        return isPaymasterStaked(userOp.paymaster, paymasterStake + requiredPreFund);\\n    }\\n\\n    function isPaymasterStaked(address paymaster, uint stake) public view returns (bool) {\\n        return isStaked(paymaster, stake, unstakeDelaySec);\\n    }\\n\\n    function isContractDeployed(address addr) external view returns (bool) {\\n        bytes32 hash;\\n        assembly {\\n            hash := extcodehash(addr)\\n        }\\n        return hash != bytes32(0);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x337080ac2e0e51a20025594715275da49ec3b5454e1cfa52e2c92ba2d61cd232\",\"license\":\"GPL-3.0\"},\"contracts/IPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\\n * a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IPaymaster {\\n\\n    /**\\n     * payment validation: check if paymaster agree to pay (using its stake)\\n     * revert to reject this request.\\n     * actual payment is done after postOp is called, by deducting actual call cost form the paymaster's stake.\\n     * @param userOp the user operation\\n     * @param requestId hash of the user's request data.\\n     * @param maxCost the maximum cost of this transaction (based on maximum gas and gas price from userOp)\\n     * @return context value to send to a postOp\\n     *  zero length to signify postOp is not required.\\n     */\\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 requestId, uint maxCost) external view returns (bytes memory context);\\n\\n    /**\\n     * post-operation handler.\\n     * Must verify sender is the entryPoint\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function postOp(PostOpMode mode, bytes calldata context, uint actualGasCost) external;\\n\\n    enum PostOpMode {\\n        opSucceeded, // user op succeeded\\n        opReverted, // user op reverted. still has to pay for gas.\\n        postOpReverted //user op succeeded, but caused postOp to revert. Now its a 2nd call, after user's op was deliberately reverted.\\n    }\\n}\\n\",\"keccak256\":\"0x0b8a3f726918dda5d2348ca4004025bdc16c417683e35eb729a9160075d4b7a9\",\"license\":\"GPL-3.0\"},\"contracts/IWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IWallet {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfuly.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param requestId hash of the user's request data. can be used as the basis for signature.\\n     * @param requiredPrefund the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 requestId, uint requiredPrefund) external;\\n}\\n\",\"keccak256\":\"0xdf815afb2285ed4930925026dcb5529478a2b3d39f1ca3f6556a0328d3ae4790\",\"license\":\"GPL-3.0\"},\"contracts/StakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * manage deposit of sender or paymaster, to pay for gas.\\n * paymaster must stake some of the deposit.\\n */\\ncontract StakeManager {\\n\\n    /// minimum number of blocks to after 'unlock' before amount can be withdrawn.\\n    uint32 immutable public unstakeDelaySec;\\n\\n    constructor(uint32 _unstakeDelaySec) {\\n        unstakeDelaySec = _unstakeDelaySec;\\n    }\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit,\\n        uint256 unstakeDelaySec\\n    );\\n\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event DepositUnstaked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 withdrawAmount\\n    );\\n\\n    /// @param amount of ether deposited for this account\\n    /// @param unstakeDelaySec - time the deposit is locked, after calling unlock (or zero if deposit is not locked)\\n    /// @param withdrawTime - first block timestamp where 'withdrawTo' will be callable, or zero if not locked\\n    struct DepositInfo {\\n        uint112 amount;\\n        uint32 unstakeDelaySec;\\n        uint64 withdrawTime;\\n    }\\n\\n    /// maps accounts to their deposits\\n    mapping(address => DepositInfo) public deposits;\\n\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info) {\\n        return deposits[account];\\n    }\\n\\n    function balanceOf(address account) public view returns (uint) {\\n        return deposits[account].amount;\\n    }\\n\\n    receive() external payable {\\n        depositTo(msg.sender);\\n    }\\n\\n    function internalIncrementDeposit(address account, uint amount) internal {\\n        deposits[account].amount += uint112(amount);\\n    }\\n\\n    function internalDecrementDeposit(address account, uint amount) internal {\\n        deposits[account].amount -= uint112(amount);\\n    }\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) public payable {\\n        internalIncrementDeposit(account, msg.value);\\n        DepositInfo storage info = deposits[account];\\n        emit Deposited(msg.sender, info.amount, info.unstakeDelaySec);\\n    }\\n\\n    /**\\n     * stake the account's deposit.\\n     * any pending unstakeDeposit is first cancelled.\\n     * can also set (or increase) the deposit with call.\\n     * @param _unstakeDelaySec the new lock time before the deposit can be withdrawn.\\n     */\\n    function addStakeTo(address account, uint32 _unstakeDelaySec) public payable {\\n        DepositInfo storage info = deposits[account];\\n        require(_unstakeDelaySec >= info.unstakeDelaySec, \\\"cannot decrease unstake time\\\");\\n        uint112 amount = deposits[msg.sender].amount + uint112(msg.value);\\n        deposits[account] = DepositInfo(\\n            amount,\\n            _unstakeDelaySec,\\n            0);\\n        emit Deposited(account, amount, _unstakeDelaySec);\\n    }\\n\\n    /**\\n     * attempt to unstake the deposit.\\n     * the value can be withdrawn (using withdrawTo) after the unstake delay.\\n     */\\n    function unstakeDeposit() external {\\n        DepositInfo storage info = deposits[msg.sender];\\n        require(info.withdrawTime == 0, \\\"already unstaking\\\");\\n        require(info.unstakeDelaySec != 0, \\\"not staked\\\");\\n        uint64 withdrawTime = uint64(block.timestamp) + info.unstakeDelaySec;\\n        info.withdrawTime = withdrawTime;\\n        emit DepositUnstaked(msg.sender, withdrawTime);\\n    }\\n\\n    /**\\n     * withdraw from the deposit.\\n     * will fail if the deposit is already staked or too low.\\n     * after a paymaster unlocks and withdraws some of the value, it must call addStake() to stake the value again.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint withdrawAmount) external {\\n        DepositInfo memory info = deposits[msg.sender];\\n        if (info.unstakeDelaySec != 0) {\\n            require(info.withdrawTime > 0, \\\"must call unstakeDeposit() first\\\");\\n            require(info.withdrawTime <= block.timestamp, \\\"Withdrawal is not due\\\");\\n        }\\n        require(withdrawAmount <= info.amount, \\\"Withdraw amount too large\\\");\\n\\n        // store the remaining value, with stake info cleared.\\n        deposits[msg.sender] = DepositInfo(\\n            info.amount - uint112(withdrawAmount),\\n            0,\\n            0);\\n        withdrawAddress.transfer(withdrawAmount);\\n        emit Withdrawn(msg.sender, withdrawAddress, withdrawAmount);\\n    }\\n\\n    /**\\n     * check if the given account is staked and didn't unlock it yet.\\n     * @param account the account (paymaster) to check\\n     * @param requiredStake the minimum deposit\\n     * @param requiredDelaySec the minimum required stake time.\\n     */\\n    function isStaked(address account, uint requiredStake, uint requiredDelaySec) public view returns (bool) {\\n        DepositInfo memory info = deposits[account];\\n        return info.amount >= requiredStake &&\\n        info.unstakeDelaySec >= requiredDelaySec &&\\n        info.withdrawTime == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x7b4150b2b8b75f5f4a47f4272ef6e3b66b37b4540b05097d6380cd85f4ae32ea\",\"license\":\"GPL-3.0-only\"},\"contracts/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.7;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint callGas;\\n        uint verificationGas;\\n        uint preVerificationGas;\\n        uint maxFeePerGas;\\n        uint maxPriorityFeePerGas;\\n        address paymaster;\\n        bytes paymasterData;\\n        bytes signature;\\n    }\\n\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address ret) {\\n        assembly {ret := calldataload(userOp)}\\n    }\\n\\n    //relayer/miner might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint) {\\n    unchecked {\\n        uint maxFeePerGas = userOp.maxFeePerGas;\\n        uint maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return min(tx.gasprice, maxFeePerGas);\\n        }\\n        return min(tx.gasprice, min(maxFeePerGas, maxPriorityFeePerGas + block.basefee));\\n    }\\n    }\\n\\n    function requiredGas(UserOperation calldata userOp) internal pure returns (uint) {\\n    unchecked {\\n        return userOp.callGas + userOp.verificationGas + userOp.preVerificationGas;\\n    }\\n    }\\n\\n    function requiredPreFund(UserOperation calldata userOp) internal view returns (uint prefund) {\\n        return requiredGas(userOp) * gasPrice(userOp);\\n    }\\n\\n    function hasPaymaster(UserOperation calldata userOp) internal pure returns (bool) {\\n        return userOp.paymaster != address(0);\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        //lighter signature scheme. must match UserOp.ts#packUserOp\\n        bytes calldata sig = userOp.signature;\\n        assembly {\\n            let ofs := userOp\\n            let len := sub(sub(sig.offset, ofs), 32)\\n            ret := mload(0x40)\\n            mstore(0x40, add(ret, add(len, 32)))\\n            mstore(ret, len)\\n            calldatacopy(add(ret, 32), ofs, len)\\n        }\\n        return ret;\\n\\n        //TODO: eip712-style ?\\n        return abi.encode(\\n            userOp.sender,\\n            userOp.nonce,\\n            keccak256(userOp.initCode),\\n            keccak256(userOp.callData),\\n            userOp.callGas,\\n            userOp.verificationGas,\\n            userOp.preVerificationGas,\\n            userOp.maxFeePerGas,\\n            userOp.maxPriorityFeePerGas,\\n            userOp.paymaster,\\n            keccak256(userOp.paymasterData)\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x6604160c0d03e3982bd4bc1c721568b5aa89812ccf43c747f35fb5bec4d29d3c\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162002c6d38038062002c6d833981016040819052620000349162000060565b60e01b6001600160e01b03191660805260609190911b6001600160601b03191660c05260a052620000bb565b6000806000606084860312156200007657600080fd5b83516001600160a01b03811681146200008e57600080fd5b60208501516040860151919450925063ffffffff81168114620000b057600080fd5b809150509250925092565b60805160e01c60a05160c05160601c612b606200010d6000396000818161014a0152818161049e0152611f1901526000818161019b015261209e0152600081816102b701526107940152612b606000f3fe6080604052600436106101235760003560e01c80634a5b84ec116100a0578063b760faf911610064578063b760faf914610455578063c31e435414610468578063dbbabd6a146104ff578063f20751eb1461051f578063fc7e286d1461054057600080fd5b80634a5b84ec1461030e5780634baeaf8a146103215780635287ce121461034157806370a0823114610408578063739b89501461042857600080fd5b8063205c2878116100e7578063205c2878146102505780632815c17b1461027057806337bbb73a14610290578063390b9978146102a557806339243aad146102ee57600080fd5b80630bfb68471461013857806317c6a987146101895780631a1c1141146101cb5780631c112a44146102005780631fa75c861461023057600080fd5b3661013357610131336105c9565b005b600080fd5b34801561014457600080fd5b5061016c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019557600080fd5b506101bd7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610180565b3480156101d757600080fd5b506101eb6101e63660046123d9565b610645565b60408051928352602083019190915201610180565b34801561020c57600080fd5b5061022061021b3660046121c1565b6106f6565b6040519015158152602001610180565b34801561023c57600080fd5b5061022061024b366004612195565b61078b565b34801561025c57600080fd5b5061013161026b366004612195565b6107c5565b34801561027c57600080fd5b5061013161028b366004612279565b610a3d565b34801561029c57600080fd5b50610131610eb5565b3480156102b157600080fd5b506102d97f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610180565b3480156102fa57600080fd5b506101bd610309366004612453565b610fd8565b61013161031c3660046121f6565b611146565b34801561032d57600080fd5b506101bd61033c3660046123d9565b6112b6565b34801561034d57600080fd5b506103ce61035c36600461215b565b6040805160608082018352600080835260208084018290529284018190526001600160a01b039490941684528382529282902082519384018352546001600160701b0381168452600160701b810463ffffffff1691840191909152600160901b90046001600160401b03169082015290565b6040805182516001600160701b0316815260208084015163ffffffff1690820152918101516001600160401b031690820152606001610180565b34801561041457600080fd5b506101bd61042336600461215b565b6112f8565b34801561043457600080fd5b50610448610443366004612238565b61131c565b60405161018091906126a7565b61013161046336600461215b565b6105c9565b34801561047457600080fd5b5061016c610483366004612350565b8151602092830120604080516001600160f81b0319818601527f000000000000000000000000000000000000000000000000000000000000000060601b6bffffffffffffffffffffffff191660218201526035810193909352605580840192909252805180840390920182526075909201909152805191012090565b34801561050b57600080fd5b5061013161051a36600461240d565b6113f5565b34801561052b57600080fd5b5061022061053a36600461215b565b3f151590565b34801561054c57600080fd5b5061059661055b36600461215b565b6000602081905290815260409020546001600160701b03811690600160701b810463ffffffff1690600160901b90046001600160401b031683565b604080516001600160701b03909416845263ffffffff90921660208401526001600160401b031690820152606001610180565b6105d38134611505565b6001600160a01b03811660009081526020818152604091829020805483516001600160701b0382168152600160701b90910463ffffffff16928101929092529133917f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca91015b60405180910390a25050565b60008060005a90506000610658856112b6565b90506106666000868361155e565b509093505060c08501355a61067b908461298a565b6106859190612909565b935033156106ef5760405162461bcd60e51b815260206004820152602c60248201527f6d7573742062652063616c6c6564206f66662d636861696e207769746820667260448201526b37b69ebd32b93796b0b2323960a11b60648201526084015b60405180910390fd5b5050915091565b6001600160a01b038316600090815260208181526040808320815160608101835290546001600160701b038116808352600160701b820463ffffffff1694830194909452600160901b90046001600160401b03169181019190915290841180159061076b575082816020015163ffffffff1610155b8015610782575060408101516001600160401b0316155b95945050505050565b60006107be83837f000000000000000000000000000000000000000000000000000000000000000063ffffffff166106f6565b9392505050565b3360009081526020818152604091829020825160608101845290546001600160701b0381168252600160701b810463ffffffff16928201839052600160901b90046001600160401b031692810192909252156108cd57600081604001516001600160401b0316116108785760405162461bcd60e51b815260206004820181905260248201527f6d7573742063616c6c20756e7374616b654465706f736974282920666972737460448201526064016106e6565b4281604001516001600160401b031611156108cd5760405162461bcd60e51b81526020600482015260156024820152745769746864726177616c206973206e6f742064756560581b60448201526064016106e6565b80516001600160701b03168211156109275760405162461bcd60e51b815260206004820152601960248201527f576974686472617720616d6f756e7420746f6f206c617267650000000000000060448201526064016106e6565b60405180606001604052808383600001516109429190612962565b6001600160701b0390811682526000602080840182905260409384018290523382528181528382208551815492870151968601516001600160401b0316600160901b0267ffffffffffffffff60901b1963ffffffff98909816600160701b026001600160901b03199094169190951617919091179490941691909117909255516001600160a01b0385169184156108fc02918591818181858888f193505050501580156109f3573d6000803e3d6000fd5b50604080516001600160a01b03851681526020810184905233917fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb910160405180910390a2505050565b816000816001600160401b03811115610a5857610a58612a5a565b604051908082528060200260200182016040528015610a81578160200160208202803683370190505b5090506000826001600160401b03811115610a9e57610a9e612a5a565b604051908082528060200260200182016040528015610ac7578160200160208202803683370190505b5090506000836001600160401b03811115610ae457610ae4612a5a565b604051908082528060200260200182016040528015610b0d578160200160208202803683370190505b5090506000846001600160401b03811115610b2a57610b2a612a5a565b604051908082528060200260200182016040528015610b53578160200160208202803683370190505b5090506000856001600160401b03811115610b7057610b70612a5a565b604051908082528060200260200182016040528015610b99578160200160208202803683370190505b50905060005b86811015610ce15760005a9050368b8b84818110610bbf57610bbf612a44565b9050602002810190610bd19190612851565b90506060600080610be1846112b6565b9050610bee86858361155e565b8b8981518110610c0057610c00612a44565b602002602001018a8a81518110610c1957610c19612a44565b60200260200101829750836001811115610c3557610c35612a2e565b6001811115610c4657610c46612a2e565b81525083815250505050829150818a8781518110610c6657610c66612a44565b6020026020010181815250508360c001355a610c82908761298a565b610c8c9190612909565b8b8781518110610c9e57610c9e612a44565b60200260200101818152505080888781518110610cbd57610cbd612a44565b60200260200101818152505050505050508080610cd9906129fd565b915050610b9f565b506000805b89811015610e9e5760005a9050368c8c84818110610d0657610d06612a44565b9050602002810190610d189190612851565b90506000888481518110610d2e57610d2e612a44565b60200260200101519050606081905060008b8681518110610d5157610d51612a44565b6020026020010151905060008a8781518110610d6f57610d6f612a44565b6020026020010151905060008a8881518110610d8d57610d8d612a44565b6020026020010151905060008a8981518110610dab57610dab612a44565b60200260200101519050306001600160a01b03166339243aad8884888888876040518763ffffffff1660e01b8152600401610deb96959493929190612748565b602060405180830381600087803b158015610e0557600080fd5b505af1925050508015610e35575060408051601f3d908101601f19168201909252610e3291810190612517565b60015b610e75576000845a610e47908b61298a565b610e519190612909565b9050610e63600289858985898861166a565b610e6d908c612909565b9a5050610e83565b610e7f818c612909565b9a50505b50505050505050508080610e96906129fd565b915050610ce6565b50610ea9888261198d565b50505050505050505050565b3360009081526020819052604090208054600160901b90046001600160401b031615610f175760405162461bcd60e51b8152602060048201526011602482015270616c726561647920756e7374616b696e6760781b60448201526064016106e6565b8054600160701b900463ffffffff16610f5f5760405162461bcd60e51b815260206004820152600a6024820152691b9bdd081cdd185ad95960b21b60448201526064016106e6565b8054600090610f7b90600160701b900463ffffffff1642612921565b825467ffffffffffffffff60901b1916600160901b6001600160401b03831690810291909117845560405190815290915033907f91e6fc21bf6989ecaaa31f2c7d10426d5fa64279f0af85af30e0964230960ce290602001610639565b6000805a9050333014610fea57600080fd5b600080610ffa60608c018c61280b565b905011156110d6576000808b356001600160a01b031660808d013561102260608f018f61280b565b604051611030929190612697565b60006040518083038160008787f1925050503d806000811461106e576040519150601f19603f3d011682016040523d82523d6000602084013e611073565b606091505b5091509150816110d3578051156110ce578b356001600160a01b03168b7f1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a2018e60200135846040516110c59291906127f2565b60405180910390a35b600192505b50505b6000865a6110e4908561298a565b6110ee9190612909565b9050611137828c8c8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508d91508c905061166a565b9b9a5050505050505050505050565b6001600160a01b0382166000908152602081905260409020805463ffffffff600160701b909104811690831610156111c05760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f7420646563726561736520756e7374616b652074696d650000000060448201526064016106e6565b336000908152602081905260408120546111e49034906001600160701b03166128de565b604080516060810182526001600160701b0383811680835263ffffffff888116602080860182815260008789018181526001600160a01b038f16808352828552918a902098518954935191516001600160401b0316600160901b0267ffffffffffffffff60901b1992909716600160701b026001600160901b031990941698169790971791909117959095169290921790945584519182528101929092529293507f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca910160405180910390a250505050565b60006112c1826119f2565b6040805160208101929092523090820152466060820152608001604051602081830303815290604052805190602001209050919050565b6001600160a01b03166000908152602081905260409020546001600160701b031690565b6060816001600160401b0381111561133657611336612a5a565b60405190808252806020026020018201604052801561135f578160200160208202803683370190505b50905060005b828110156113ee5760008085858481811061138257611382612a44565b9050602002016020810190611397919061215b565b6001600160a01b0316815260208101919091526040016000205482516001600160701b03909116908390839081106113d1576113d1612a44565b6020908102919091010152806113e6816129fd565b915050611365565b5092915050565b60005a90506000611405846112b6565b905060008060006114186000888661155e565b92509250925060008760c001355a611430908861298a565b61143a9190612909565b6040516339243aad60e01b815290915060009030906339243aad9061146d908c908a90889088908c908c90600401612748565b602060405180830381600087803b15801561148757600080fd5b505af19250505080156114b7575060408051601f3d908101601f191682019092526114b491810190612517565b60015b6114ed576000825a6114c9908a61298a565b6114d39190612909565b90506114e560028b8987858b8b61166a565b9150506114f0565b90505b6114fa888261198d565b505050505050505050565b6001600160a01b038216600090815260208190526040812080548392906115369084906001600160701b03166128de565b92506101000a8154816001600160701b0302191690836001600160701b031602179055505050565b600080606060005a905060008061157488611a0b565b955090506115858989898489611a37565b965091504360008087600181111561159f5761159f612a2e565b14156115bc576115b28b8b8b8688611c1d565b90965090506115cf565b6040518060200160405280600081525095505b60005a6115dc908761298a565b9050808b60a00135101561165b578b6115fd6101408d016101208e0161215b565b60405162fa072b60e01b815260048101929092526001600160a01b0316602482015260606044820152601e60648201527f55736564206d6f7265207468616e20766572696669636174696f6e4761730000608482015260a4016106e6565b50505050505093509350939050565b6000805a9050600061167b89611dfc565b90506116878187612943565b9250600084600181111561169d5761169d612a2e565b1461171c57828510156116fd5760405162461bcd60e51b815260206004820152602260248201527f77616c6c65742070726566756e642062656c6f772061637475616c476173436f6044820152611cdd60f21b60648201526084016106e6565b6000611709848761298a565b90506117168a3582611505565b506118f8565b8651156118ba5760028a600281111561173757611737612a2e565b146117b45761174e6101408a016101208b0161215b565b6001600160a01b031663a9a234098b89866040518463ffffffff1660e01b815260040161177d9392919061270f565b600060405180830381600087803b15801561179757600080fd5b505af11580156117ab573d6000803e3d6000fd5b505050506118ba565b6117c66101408a016101208b0161215b565b6001600160a01b031663a9a234098b89866040518463ffffffff1660e01b81526004016117f59392919061270f565b600060405180830381600087803b15801561180f57600080fd5b505af1925050508015611820575060015b6118ba573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b606091505b506118666101408b016101208c0161215b565b6001600160a01b03168a356001600160a01b03168a7ff6c093f11418b6fd4d07651255d51a3ed2da1be560c58f19767dede55c6e43d68d60200135856040516118b09291906127f2565b60405180910390a4505b5a6118c5908361298a565b6118cf9087612909565b95506118db8187612943565b92506118f86118f26101408b016101208c0161215b565b84611e38565b6000808b600281111561190d5761190d612a2e565b1490506119226101408b016101208c0161215b565b604080516020808e013582528101879052808201859052831515606082015290516001600160a01b03928316928d3516918c917f33fd4d1f25a5461bea901784a6571de6debc16cd0831932c22c6969cd73ba9949181900360800190a4505050979650505050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146119da576040519150601f19603f3d011682016040523d82523d6000602084013e6119df565b606091505b50509050806119ed57600080fd5b505050565b60006119fd82611e69565b805190602001209050919050565b600080611a1783611ea8565b9150611a2283611ed3565b15611a2f57506000915091565b506001915091565b60008060005a9050611a4887611ef9565b6000873581866001811115611a5f57611a5f612a2e565b14611a8e576000611a6f826112f8565b9050878111611a8757611a82818961298a565b611a8a565b60005b9250505b604051633f2eb07d60e21b81526001600160a01b0382169063fcbac1f49060a08c013590611ac4908d908d9088906004016127a3565b600060405180830381600088803b158015611ade57600080fd5b5087f193505050508015611af0575060015b611b6d57611afc612a70565b806308c379a01415611b3b5750611b11612a8c565b80611b1c5750611b3d565b8a60008260405162fa072b60e01b81526004016106e6939291906127c8565b505b60405162fa072b60e01b8152600481018b90526000602482018190526060604483015260648201526084016106e6565b6000866001811115611b8157611b81612a2e565b14611bfe57611b8f816112f8565b871115611bec5760405162fa072b60e01b8152600481018b90526000602482015260606044820152601960648201527f77616c6c6574206469646e2774207061792070726566756e6400000000000000608482015260a4016106e6565b611bf68188611e38565b869350611c03565b600093505b5a611c0e908461298a565b94505050509550959350505050565b60606000805a9050611c2f8786612081565b611c975787611c4661014089016101208a0161215b565b60405162fa072b60e01b815260048101929092526001600160a01b0316602482015260606044820152601060648201526f6e6f7420656e6f756768207374616b6560801b608482015260a4016106e6565b6000611ca78560a08a013561298a565b9050611cbb61014089016101208a0161215b565b6001600160a01b0316637bfd0845828a8a8a6040518563ffffffff1660e01b8152600401611ceb939291906127a3565b60006040518083038187803b158015611d0357600080fd5b5086fa93505050508015611d3957506040513d6000823e601f3d908101601f19168201604052611d3691908101906122cf565b60015b611de157611d45612a70565b806308c379a01415611d945750611d5a612a8c565b80611d655750611d96565b89611d786101408b016101208c0161215b565b8260405162fa072b60e01b81526004016106e6939291906127c8565b505b88611da96101408a016101208b0161215b565b60405162fa072b60e01b815260048101929092526001600160a01b0316602482015260606044820152600060648201526084016106e6565b93505a611dee908361298a565b925050509550959350505050565b600060e082013561010083013580821415611e2357611e1b3a836120c2565b949350505050565b611e1b3a611e33844885016120c2565b6120c2565b6001600160a01b038216600090815260208190526040812080548392906115369084906001600160701b0316612962565b6060366000611e7c61016085018561280b565b915091508360208184030360405194506020810185016040528085528082602087013750505050919050565b6000611eb382611dfc565b611ecd90608084013560a08501350160c085013501612943565b92915050565b600080611ee86101408401610120850161215b565b6001600160a01b0316141592915050565b611f06604082018261280b565b15905061207e5760006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016634af63f02611f4b604085018561280b565b6040516001600160e01b031960e085901b168152611f739291906020880135906004016126eb565b602060405180830381600087803b158015611f8d57600080fd5b505af1158015611fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc59190612178565b90506001600160a01b03811661200e5760405162461bcd60e51b815260206004820152600e60248201526d18dc99585d194c8819985a5b195960921b60448201526064016106e6565b81356001600160a01b0316816001600160a01b03161461207c5760405162461bcd60e51b8152602060048201526024808201527f73656e64657220646f65736e2774206d617463682063726561746532206164646044820152637265737360e01b60648201526084016106e6565b505b50565b60006107be6120986101408501610120860161215b565b61024b847f0000000000000000000000000000000000000000000000000000000000000000612909565b60008183106120d157816107be565b5090919050565b80356120e381612b15565b919050565b60008083601f8401126120fa57600080fd5b5081356001600160401b0381111561211157600080fd5b6020830191508360208260051b850101111561212c57600080fd5b9250929050565b8035600281106120e357600080fd5b6000610180828403121561215557600080fd5b50919050565b60006020828403121561216d57600080fd5b81356107be81612b15565b60006020828403121561218a57600080fd5b81516107be81612b15565b600080604083850312156121a857600080fd5b82356121b381612b15565b946020939093013593505050565b6000806000606084860312156121d657600080fd5b83356121e181612b15565b95602085013595506040909401359392505050565b6000806040838503121561220957600080fd5b823561221481612b15565b9150602083013563ffffffff8116811461222d57600080fd5b809150509250929050565b6000806020838503121561224b57600080fd5b82356001600160401b0381111561226157600080fd5b61226d858286016120e8565b90969095509350505050565b60008060006040848603121561228e57600080fd5b83356001600160401b038111156122a457600080fd5b6122b0868287016120e8565b90945092505060208401356122c481612b15565b809150509250925092565b6000602082840312156122e157600080fd5b81516001600160401b038111156122f757600080fd5b8201601f8101841361230857600080fd5b805161231381612872565b60405161232082826129d1565b82815286602084860101111561233557600080fd5b6123468360208301602087016129a1565b9695505050505050565b6000806040838503121561236357600080fd5b82356001600160401b0381111561237957600080fd5b8301601f8101851361238a57600080fd5b803561239581612872565b6040516123a282826129d1565b8281528760208486010111156123b757600080fd5b8260208501602083013760006020938201840152979590910135955050505050565b6000602082840312156123eb57600080fd5b81356001600160401b0381111561240157600080fd5b611e1b84828501612142565b6000806040838503121561242057600080fd5b82356001600160401b0381111561243657600080fd5b61244285828601612142565b925050602083013561222d81612b15565b600080600080600080600060c0888a03121561246e57600080fd5b87356001600160401b038082111561248557600080fd5b6124918b838c01612142565b985060208a0135975060408a01359150808211156124ae57600080fd5b818a0191508a601f8301126124c257600080fd5b8135818111156124d157600080fd5b8b60208285010111156124e357600080fd5b602083019750809650505050606088013592506080880135915061250960a08901612133565b905092959891949750929550565b60006020828403121561252957600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526125718160208601602086016129a1565b601f01601f19169290920160200192915050565b60006101806125a484612597856120d8565b6001600160a01b03169052565b602083013560208501526125bb6040840184612899565b8260408701526125ce8387018284612530565b925050506125df6060840184612899565b85830360608701526125f2838284612530565b925050506080830135608085015260a083013560a085015260c083013560c085015260e083013560e08501526101008084013581860152506101206126388185016120d8565b6001600160a01b03169085015261014061265484820185612899565b86840383880152612666848284612530565b935050505061016061267a81850185612899565b8684038388015261268c848284612530565b979650505050505050565b8183823760009101908152919050565b6020808252825182820181905260009190848201906040850190845b818110156126df578351835292840192918401916001016126c3565b50909695505050505050565b6040815260006126ff604083018587612530565b9050826020830152949350505050565b60006003851061272157612721612a2e565b848252606060208301526127386060830185612559565b9050826040830152949350505050565b60c08152600061275b60c0830189612585565b87602084015282810360408401526127738188612559565b9150508460608301528360808301526002831061279257612792612a2e565b8260a0830152979650505050505050565b6060815260006127b66060830186612585565b60208301949094525060400152919050565b8381526001600160a01b038316602082015260606040820181905260009061078290830184612559565b828152604060208201526000611e1b6040830184612559565b6000808335601e1984360301811261282257600080fd5b8301803591506001600160401b0382111561283c57600080fd5b60200191503681900382131561212c57600080fd5b6000823561017e1983360301811261286857600080fd5b9190910192915050565b60006001600160401b0382111561288b5761288b612a5a565b50601f01601f191660200190565b6000808335601e198436030181126128b057600080fd5b83016020810192503590506001600160401b038111156128cf57600080fd5b80360383131561212c57600080fd5b60006001600160701b0380831681851680830382111561290057612900612a18565b01949350505050565b6000821982111561291c5761291c612a18565b500190565b60006001600160401b0380831681851680830382111561290057612900612a18565b600081600019048311821515161561295d5761295d612a18565b500290565b60006001600160701b038381169083168181101561298257612982612a18565b039392505050565b60008282101561299c5761299c612a18565b500390565b60005b838110156129bc5781810151838201526020016129a4565b838111156129cb576000848401525b50505050565b601f8201601f191681016001600160401b03811182821017156129f6576129f6612a5a565b6040525050565b6000600019821415612a1157612a11612a18565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612a895760046000803e5060005160e01c5b90565b600060443d1015612a9a5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612ac957505050505090565b8285019150815181811115612ae15750505050505090565b843d8701016020828501011115612afb5750505050505090565b612b0a602082860101876129d1565b509095945050505050565b6001600160a01b038116811461207e57600080fdfea264697066735822122043f4da2823bc24e954c400d3bde80e5e17b0af05d1e3d70fe5ce618abec8cec864736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80634a5b84ec116100a0578063b760faf911610064578063b760faf914610455578063c31e435414610468578063dbbabd6a146104ff578063f20751eb1461051f578063fc7e286d1461054057600080fd5b80634a5b84ec1461030e5780634baeaf8a146103215780635287ce121461034157806370a0823114610408578063739b89501461042857600080fd5b8063205c2878116100e7578063205c2878146102505780632815c17b1461027057806337bbb73a14610290578063390b9978146102a557806339243aad146102ee57600080fd5b80630bfb68471461013857806317c6a987146101895780631a1c1141146101cb5780631c112a44146102005780631fa75c861461023057600080fd5b3661013357610131336105c9565b005b600080fd5b34801561014457600080fd5b5061016c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019557600080fd5b506101bd7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610180565b3480156101d757600080fd5b506101eb6101e63660046123d9565b610645565b60408051928352602083019190915201610180565b34801561020c57600080fd5b5061022061021b3660046121c1565b6106f6565b6040519015158152602001610180565b34801561023c57600080fd5b5061022061024b366004612195565b61078b565b34801561025c57600080fd5b5061013161026b366004612195565b6107c5565b34801561027c57600080fd5b5061013161028b366004612279565b610a3d565b34801561029c57600080fd5b50610131610eb5565b3480156102b157600080fd5b506102d97f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610180565b3480156102fa57600080fd5b506101bd610309366004612453565b610fd8565b61013161031c3660046121f6565b611146565b34801561032d57600080fd5b506101bd61033c3660046123d9565b6112b6565b34801561034d57600080fd5b506103ce61035c36600461215b565b6040805160608082018352600080835260208084018290529284018190526001600160a01b039490941684528382529282902082519384018352546001600160701b0381168452600160701b810463ffffffff1691840191909152600160901b90046001600160401b03169082015290565b6040805182516001600160701b0316815260208084015163ffffffff1690820152918101516001600160401b031690820152606001610180565b34801561041457600080fd5b506101bd61042336600461215b565b6112f8565b34801561043457600080fd5b50610448610443366004612238565b61131c565b60405161018091906126a7565b61013161046336600461215b565b6105c9565b34801561047457600080fd5b5061016c610483366004612350565b8151602092830120604080516001600160f81b0319818601527f000000000000000000000000000000000000000000000000000000000000000060601b6bffffffffffffffffffffffff191660218201526035810193909352605580840192909252805180840390920182526075909201909152805191012090565b34801561050b57600080fd5b5061013161051a36600461240d565b6113f5565b34801561052b57600080fd5b5061022061053a36600461215b565b3f151590565b34801561054c57600080fd5b5061059661055b36600461215b565b6000602081905290815260409020546001600160701b03811690600160701b810463ffffffff1690600160901b90046001600160401b031683565b604080516001600160701b03909416845263ffffffff90921660208401526001600160401b031690820152606001610180565b6105d38134611505565b6001600160a01b03811660009081526020818152604091829020805483516001600160701b0382168152600160701b90910463ffffffff16928101929092529133917f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca91015b60405180910390a25050565b60008060005a90506000610658856112b6565b90506106666000868361155e565b509093505060c08501355a61067b908461298a565b6106859190612909565b935033156106ef5760405162461bcd60e51b815260206004820152602c60248201527f6d7573742062652063616c6c6564206f66662d636861696e207769746820667260448201526b37b69ebd32b93796b0b2323960a11b60648201526084015b60405180910390fd5b5050915091565b6001600160a01b038316600090815260208181526040808320815160608101835290546001600160701b038116808352600160701b820463ffffffff1694830194909452600160901b90046001600160401b03169181019190915290841180159061076b575082816020015163ffffffff1610155b8015610782575060408101516001600160401b0316155b95945050505050565b60006107be83837f000000000000000000000000000000000000000000000000000000000000000063ffffffff166106f6565b9392505050565b3360009081526020818152604091829020825160608101845290546001600160701b0381168252600160701b810463ffffffff16928201839052600160901b90046001600160401b031692810192909252156108cd57600081604001516001600160401b0316116108785760405162461bcd60e51b815260206004820181905260248201527f6d7573742063616c6c20756e7374616b654465706f736974282920666972737460448201526064016106e6565b4281604001516001600160401b031611156108cd5760405162461bcd60e51b81526020600482015260156024820152745769746864726177616c206973206e6f742064756560581b60448201526064016106e6565b80516001600160701b03168211156109275760405162461bcd60e51b815260206004820152601960248201527f576974686472617720616d6f756e7420746f6f206c617267650000000000000060448201526064016106e6565b60405180606001604052808383600001516109429190612962565b6001600160701b0390811682526000602080840182905260409384018290523382528181528382208551815492870151968601516001600160401b0316600160901b0267ffffffffffffffff60901b1963ffffffff98909816600160701b026001600160901b03199094169190951617919091179490941691909117909255516001600160a01b0385169184156108fc02918591818181858888f193505050501580156109f3573d6000803e3d6000fd5b50604080516001600160a01b03851681526020810184905233917fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb910160405180910390a2505050565b816000816001600160401b03811115610a5857610a58612a5a565b604051908082528060200260200182016040528015610a81578160200160208202803683370190505b5090506000826001600160401b03811115610a9e57610a9e612a5a565b604051908082528060200260200182016040528015610ac7578160200160208202803683370190505b5090506000836001600160401b03811115610ae457610ae4612a5a565b604051908082528060200260200182016040528015610b0d578160200160208202803683370190505b5090506000846001600160401b03811115610b2a57610b2a612a5a565b604051908082528060200260200182016040528015610b53578160200160208202803683370190505b5090506000856001600160401b03811115610b7057610b70612a5a565b604051908082528060200260200182016040528015610b99578160200160208202803683370190505b50905060005b86811015610ce15760005a9050368b8b84818110610bbf57610bbf612a44565b9050602002810190610bd19190612851565b90506060600080610be1846112b6565b9050610bee86858361155e565b8b8981518110610c0057610c00612a44565b602002602001018a8a81518110610c1957610c19612a44565b60200260200101829750836001811115610c3557610c35612a2e565b6001811115610c4657610c46612a2e565b81525083815250505050829150818a8781518110610c6657610c66612a44565b6020026020010181815250508360c001355a610c82908761298a565b610c8c9190612909565b8b8781518110610c9e57610c9e612a44565b60200260200101818152505080888781518110610cbd57610cbd612a44565b60200260200101818152505050505050508080610cd9906129fd565b915050610b9f565b506000805b89811015610e9e5760005a9050368c8c84818110610d0657610d06612a44565b9050602002810190610d189190612851565b90506000888481518110610d2e57610d2e612a44565b60200260200101519050606081905060008b8681518110610d5157610d51612a44565b6020026020010151905060008a8781518110610d6f57610d6f612a44565b6020026020010151905060008a8881518110610d8d57610d8d612a44565b6020026020010151905060008a8981518110610dab57610dab612a44565b60200260200101519050306001600160a01b03166339243aad8884888888876040518763ffffffff1660e01b8152600401610deb96959493929190612748565b602060405180830381600087803b158015610e0557600080fd5b505af1925050508015610e35575060408051601f3d908101601f19168201909252610e3291810190612517565b60015b610e75576000845a610e47908b61298a565b610e519190612909565b9050610e63600289858985898861166a565b610e6d908c612909565b9a5050610e83565b610e7f818c612909565b9a50505b50505050505050508080610e96906129fd565b915050610ce6565b50610ea9888261198d565b50505050505050505050565b3360009081526020819052604090208054600160901b90046001600160401b031615610f175760405162461bcd60e51b8152602060048201526011602482015270616c726561647920756e7374616b696e6760781b60448201526064016106e6565b8054600160701b900463ffffffff16610f5f5760405162461bcd60e51b815260206004820152600a6024820152691b9bdd081cdd185ad95960b21b60448201526064016106e6565b8054600090610f7b90600160701b900463ffffffff1642612921565b825467ffffffffffffffff60901b1916600160901b6001600160401b03831690810291909117845560405190815290915033907f91e6fc21bf6989ecaaa31f2c7d10426d5fa64279f0af85af30e0964230960ce290602001610639565b6000805a9050333014610fea57600080fd5b600080610ffa60608c018c61280b565b905011156110d6576000808b356001600160a01b031660808d013561102260608f018f61280b565b604051611030929190612697565b60006040518083038160008787f1925050503d806000811461106e576040519150601f19603f3d011682016040523d82523d6000602084013e611073565b606091505b5091509150816110d3578051156110ce578b356001600160a01b03168b7f1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a2018e60200135846040516110c59291906127f2565b60405180910390a35b600192505b50505b6000865a6110e4908561298a565b6110ee9190612909565b9050611137828c8c8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508d91508c905061166a565b9b9a5050505050505050505050565b6001600160a01b0382166000908152602081905260409020805463ffffffff600160701b909104811690831610156111c05760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f7420646563726561736520756e7374616b652074696d650000000060448201526064016106e6565b336000908152602081905260408120546111e49034906001600160701b03166128de565b604080516060810182526001600160701b0383811680835263ffffffff888116602080860182815260008789018181526001600160a01b038f16808352828552918a902098518954935191516001600160401b0316600160901b0267ffffffffffffffff60901b1992909716600160701b026001600160901b031990941698169790971791909117959095169290921790945584519182528101929092529293507f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca910160405180910390a250505050565b60006112c1826119f2565b6040805160208101929092523090820152466060820152608001604051602081830303815290604052805190602001209050919050565b6001600160a01b03166000908152602081905260409020546001600160701b031690565b6060816001600160401b0381111561133657611336612a5a565b60405190808252806020026020018201604052801561135f578160200160208202803683370190505b50905060005b828110156113ee5760008085858481811061138257611382612a44565b9050602002016020810190611397919061215b565b6001600160a01b0316815260208101919091526040016000205482516001600160701b03909116908390839081106113d1576113d1612a44565b6020908102919091010152806113e6816129fd565b915050611365565b5092915050565b60005a90506000611405846112b6565b905060008060006114186000888661155e565b92509250925060008760c001355a611430908861298a565b61143a9190612909565b6040516339243aad60e01b815290915060009030906339243aad9061146d908c908a90889088908c908c90600401612748565b602060405180830381600087803b15801561148757600080fd5b505af19250505080156114b7575060408051601f3d908101601f191682019092526114b491810190612517565b60015b6114ed576000825a6114c9908a61298a565b6114d39190612909565b90506114e560028b8987858b8b61166a565b9150506114f0565b90505b6114fa888261198d565b505050505050505050565b6001600160a01b038216600090815260208190526040812080548392906115369084906001600160701b03166128de565b92506101000a8154816001600160701b0302191690836001600160701b031602179055505050565b600080606060005a905060008061157488611a0b565b955090506115858989898489611a37565b965091504360008087600181111561159f5761159f612a2e565b14156115bc576115b28b8b8b8688611c1d565b90965090506115cf565b6040518060200160405280600081525095505b60005a6115dc908761298a565b9050808b60a00135101561165b578b6115fd6101408d016101208e0161215b565b60405162fa072b60e01b815260048101929092526001600160a01b0316602482015260606044820152601e60648201527f55736564206d6f7265207468616e20766572696669636174696f6e4761730000608482015260a4016106e6565b50505050505093509350939050565b6000805a9050600061167b89611dfc565b90506116878187612943565b9250600084600181111561169d5761169d612a2e565b1461171c57828510156116fd5760405162461bcd60e51b815260206004820152602260248201527f77616c6c65742070726566756e642062656c6f772061637475616c476173436f6044820152611cdd60f21b60648201526084016106e6565b6000611709848761298a565b90506117168a3582611505565b506118f8565b8651156118ba5760028a600281111561173757611737612a2e565b146117b45761174e6101408a016101208b0161215b565b6001600160a01b031663a9a234098b89866040518463ffffffff1660e01b815260040161177d9392919061270f565b600060405180830381600087803b15801561179757600080fd5b505af11580156117ab573d6000803e3d6000fd5b505050506118ba565b6117c66101408a016101208b0161215b565b6001600160a01b031663a9a234098b89866040518463ffffffff1660e01b81526004016117f59392919061270f565b600060405180830381600087803b15801561180f57600080fd5b505af1925050508015611820575060015b6118ba573d80801561184e576040519150601f19603f3d011682016040523d82523d6000602084013e611853565b606091505b506118666101408b016101208c0161215b565b6001600160a01b03168a356001600160a01b03168a7ff6c093f11418b6fd4d07651255d51a3ed2da1be560c58f19767dede55c6e43d68d60200135856040516118b09291906127f2565b60405180910390a4505b5a6118c5908361298a565b6118cf9087612909565b95506118db8187612943565b92506118f86118f26101408b016101208c0161215b565b84611e38565b6000808b600281111561190d5761190d612a2e565b1490506119226101408b016101208c0161215b565b604080516020808e013582528101879052808201859052831515606082015290516001600160a01b03928316928d3516918c917f33fd4d1f25a5461bea901784a6571de6debc16cd0831932c22c6969cd73ba9949181900360800190a4505050979650505050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146119da576040519150601f19603f3d011682016040523d82523d6000602084013e6119df565b606091505b50509050806119ed57600080fd5b505050565b60006119fd82611e69565b805190602001209050919050565b600080611a1783611ea8565b9150611a2283611ed3565b15611a2f57506000915091565b506001915091565b60008060005a9050611a4887611ef9565b6000873581866001811115611a5f57611a5f612a2e565b14611a8e576000611a6f826112f8565b9050878111611a8757611a82818961298a565b611a8a565b60005b9250505b604051633f2eb07d60e21b81526001600160a01b0382169063fcbac1f49060a08c013590611ac4908d908d9088906004016127a3565b600060405180830381600088803b158015611ade57600080fd5b5087f193505050508015611af0575060015b611b6d57611afc612a70565b806308c379a01415611b3b5750611b11612a8c565b80611b1c5750611b3d565b8a60008260405162fa072b60e01b81526004016106e6939291906127c8565b505b60405162fa072b60e01b8152600481018b90526000602482018190526060604483015260648201526084016106e6565b6000866001811115611b8157611b81612a2e565b14611bfe57611b8f816112f8565b871115611bec5760405162fa072b60e01b8152600481018b90526000602482015260606044820152601960648201527f77616c6c6574206469646e2774207061792070726566756e6400000000000000608482015260a4016106e6565b611bf68188611e38565b869350611c03565b600093505b5a611c0e908461298a565b94505050509550959350505050565b60606000805a9050611c2f8786612081565b611c975787611c4661014089016101208a0161215b565b60405162fa072b60e01b815260048101929092526001600160a01b0316602482015260606044820152601060648201526f6e6f7420656e6f756768207374616b6560801b608482015260a4016106e6565b6000611ca78560a08a013561298a565b9050611cbb61014089016101208a0161215b565b6001600160a01b0316637bfd0845828a8a8a6040518563ffffffff1660e01b8152600401611ceb939291906127a3565b60006040518083038187803b158015611d0357600080fd5b5086fa93505050508015611d3957506040513d6000823e601f3d908101601f19168201604052611d3691908101906122cf565b60015b611de157611d45612a70565b806308c379a01415611d945750611d5a612a8c565b80611d655750611d96565b89611d786101408b016101208c0161215b565b8260405162fa072b60e01b81526004016106e6939291906127c8565b505b88611da96101408a016101208b0161215b565b60405162fa072b60e01b815260048101929092526001600160a01b0316602482015260606044820152600060648201526084016106e6565b93505a611dee908361298a565b925050509550959350505050565b600060e082013561010083013580821415611e2357611e1b3a836120c2565b949350505050565b611e1b3a611e33844885016120c2565b6120c2565b6001600160a01b038216600090815260208190526040812080548392906115369084906001600160701b0316612962565b6060366000611e7c61016085018561280b565b915091508360208184030360405194506020810185016040528085528082602087013750505050919050565b6000611eb382611dfc565b611ecd90608084013560a08501350160c085013501612943565b92915050565b600080611ee86101408401610120850161215b565b6001600160a01b0316141592915050565b611f06604082018261280b565b15905061207e5760006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016634af63f02611f4b604085018561280b565b6040516001600160e01b031960e085901b168152611f739291906020880135906004016126eb565b602060405180830381600087803b158015611f8d57600080fd5b505af1158015611fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc59190612178565b90506001600160a01b03811661200e5760405162461bcd60e51b815260206004820152600e60248201526d18dc99585d194c8819985a5b195960921b60448201526064016106e6565b81356001600160a01b0316816001600160a01b03161461207c5760405162461bcd60e51b8152602060048201526024808201527f73656e64657220646f65736e2774206d617463682063726561746532206164646044820152637265737360e01b60648201526084016106e6565b505b50565b60006107be6120986101408501610120860161215b565b61024b847f0000000000000000000000000000000000000000000000000000000000000000612909565b60008183106120d157816107be565b5090919050565b80356120e381612b15565b919050565b60008083601f8401126120fa57600080fd5b5081356001600160401b0381111561211157600080fd5b6020830191508360208260051b850101111561212c57600080fd5b9250929050565b8035600281106120e357600080fd5b6000610180828403121561215557600080fd5b50919050565b60006020828403121561216d57600080fd5b81356107be81612b15565b60006020828403121561218a57600080fd5b81516107be81612b15565b600080604083850312156121a857600080fd5b82356121b381612b15565b946020939093013593505050565b6000806000606084860312156121d657600080fd5b83356121e181612b15565b95602085013595506040909401359392505050565b6000806040838503121561220957600080fd5b823561221481612b15565b9150602083013563ffffffff8116811461222d57600080fd5b809150509250929050565b6000806020838503121561224b57600080fd5b82356001600160401b0381111561226157600080fd5b61226d858286016120e8565b90969095509350505050565b60008060006040848603121561228e57600080fd5b83356001600160401b038111156122a457600080fd5b6122b0868287016120e8565b90945092505060208401356122c481612b15565b809150509250925092565b6000602082840312156122e157600080fd5b81516001600160401b038111156122f757600080fd5b8201601f8101841361230857600080fd5b805161231381612872565b60405161232082826129d1565b82815286602084860101111561233557600080fd5b6123468360208301602087016129a1565b9695505050505050565b6000806040838503121561236357600080fd5b82356001600160401b0381111561237957600080fd5b8301601f8101851361238a57600080fd5b803561239581612872565b6040516123a282826129d1565b8281528760208486010111156123b757600080fd5b8260208501602083013760006020938201840152979590910135955050505050565b6000602082840312156123eb57600080fd5b81356001600160401b0381111561240157600080fd5b611e1b84828501612142565b6000806040838503121561242057600080fd5b82356001600160401b0381111561243657600080fd5b61244285828601612142565b925050602083013561222d81612b15565b600080600080600080600060c0888a03121561246e57600080fd5b87356001600160401b038082111561248557600080fd5b6124918b838c01612142565b985060208a0135975060408a01359150808211156124ae57600080fd5b818a0191508a601f8301126124c257600080fd5b8135818111156124d157600080fd5b8b60208285010111156124e357600080fd5b602083019750809650505050606088013592506080880135915061250960a08901612133565b905092959891949750929550565b60006020828403121561252957600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526125718160208601602086016129a1565b601f01601f19169290920160200192915050565b60006101806125a484612597856120d8565b6001600160a01b03169052565b602083013560208501526125bb6040840184612899565b8260408701526125ce8387018284612530565b925050506125df6060840184612899565b85830360608701526125f2838284612530565b925050506080830135608085015260a083013560a085015260c083013560c085015260e083013560e08501526101008084013581860152506101206126388185016120d8565b6001600160a01b03169085015261014061265484820185612899565b86840383880152612666848284612530565b935050505061016061267a81850185612899565b8684038388015261268c848284612530565b979650505050505050565b8183823760009101908152919050565b6020808252825182820181905260009190848201906040850190845b818110156126df578351835292840192918401916001016126c3565b50909695505050505050565b6040815260006126ff604083018587612530565b9050826020830152949350505050565b60006003851061272157612721612a2e565b848252606060208301526127386060830185612559565b9050826040830152949350505050565b60c08152600061275b60c0830189612585565b87602084015282810360408401526127738188612559565b9150508460608301528360808301526002831061279257612792612a2e565b8260a0830152979650505050505050565b6060815260006127b66060830186612585565b60208301949094525060400152919050565b8381526001600160a01b038316602082015260606040820181905260009061078290830184612559565b828152604060208201526000611e1b6040830184612559565b6000808335601e1984360301811261282257600080fd5b8301803591506001600160401b0382111561283c57600080fd5b60200191503681900382131561212c57600080fd5b6000823561017e1983360301811261286857600080fd5b9190910192915050565b60006001600160401b0382111561288b5761288b612a5a565b50601f01601f191660200190565b6000808335601e198436030181126128b057600080fd5b83016020810192503590506001600160401b038111156128cf57600080fd5b80360383131561212c57600080fd5b60006001600160701b0380831681851680830382111561290057612900612a18565b01949350505050565b6000821982111561291c5761291c612a18565b500190565b60006001600160401b0380831681851680830382111561290057612900612a18565b600081600019048311821515161561295d5761295d612a18565b500290565b60006001600160701b038381169083168181101561298257612982612a18565b039392505050565b60008282101561299c5761299c612a18565b500390565b60005b838110156129bc5781810151838201526020016129a4565b838111156129cb576000848401525b50505050565b601f8201601f191681016001600160401b03811182821017156129f6576129f6612a5a565b6040525050565b6000600019821415612a1157612a11612a18565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612a895760046000803e5060005160e01c5b90565b600060443d1015612a9a5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612ac957505050505090565b8285019150815181811115612ae15750505050505090565b843d8701016020828501011115612afb5750505050505090565b612b0a602082860101876129d1565b509095945050505050565b6001600160a01b038116811461207e57600080fdfea264697066735822122043f4da2823bc24e954c400d3bde80e5e17b0af05d1e3d70fe5ce618abec8cec864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addStakeTo(address,uint32)": {
        "params": {
          "_unstakeDelaySec": "the new lock time before the deposit can be withdrawn."
        }
      },
      "constructor": {
        "params": {
          "_create2factory": "- contract to \"create2\" wallets (not the EntryPoint itself, so that it can be upgraded)",
          "_paymasterStake": "- locked stake of paymaster (actual value should also cover TX cost)",
          "_unstakeDelaySec": "- minimum time (in seconds) a paymaster stake must be locked"
        }
      },
      "handleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes),address)": {
        "params": {
          "beneficiary": "the address to receive the fees",
          "op": "the operation to execute"
        }
      },
      "handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes)[],address)": {
        "params": {
          "beneficiary": "the address to receive the fees",
          "ops": "the operations to execute"
        }
      },
      "isStaked(address,uint256,uint256)": {
        "params": {
          "account": "the account (paymaster) to check",
          "requiredDelaySec": "the minimum required stake time.",
          "requiredStake": "the minimum deposit"
        }
      },
      "simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes))": {
        "details": "The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the wallet's data.      In order to split the running opcodes of the wallet (validateUserOp) from the paymaster's validatePaymasterUserOp,      it should look for the NUMBER opcode at depth=1 (which itself is a banned opcode)",
        "returns": {
          "preOpGas": "total gas used by validation (including contract creation)",
          "prefund": "the amount the wallet had to prefund (zero in case a paymaster pays)"
        }
      },
      "withdrawTo(address,uint256)": {
        "params": {
          "withdrawAddress": "the address to send withdrawn value.",
          "withdrawAmount": "the amount to withdraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DepositUnstaked(address,uint256)": {
        "notice": "Emitted once a stake is scheduled for withdrawal"
      }
    },
    "kind": "user",
    "methods": {
      "addStakeTo(address,uint32)": {
        "notice": "stake the account's deposit. any pending unstakeDeposit is first cancelled. can also set (or increase) the deposit with call."
      },
      "depositTo(address)": {
        "notice": "add to the deposit of the given account"
      },
      "deposits(address)": {
        "notice": "maps accounts to their deposits"
      },
      "getRequestId((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes))": {
        "notice": "generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature)."
      },
      "getSenderAddress(bytes,uint256)": {
        "notice": "Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation."
      },
      "handleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes),address)": {
        "notice": "Execute the given UserOperation."
      },
      "handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes)[],address)": {
        "notice": "Execute a batch of UserOperation."
      },
      "isStaked(address,uint256,uint256)": {
        "notice": "check if the given account is staked and didn't unlock it yet."
      },
      "simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,address,bytes,bytes))": {
        "notice": "Simulate a call to wallet.validateUserOp and paymaster.validatePaymasterUserOp. Validation succeeds of the call doesn't revert."
      },
      "unstakeDelaySec()": {
        "notice": "minimum number of blocks to after 'unlock' before amount can be withdrawn."
      },
      "unstakeDeposit()": {
        "notice": "attempt to unstake the deposit. the value can be withdrawn (using withdrawTo) after the unstake delay."
      },
      "withdrawTo(address,uint256)": {
        "notice": "withdraw from the deposit. will fail if the deposit is already staked or too low. after a paymaster unlocks and withdraws some of the value, it must call addStake() to stake the value again."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3622,
        "contract": "contracts/EntryPoint.sol:EntryPoint",
        "label": "deposits",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(DepositInfo)3616_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(DepositInfo)3616_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakeManager.DepositInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositInfo)3616_storage"
      },
      "t_struct(DepositInfo)3616_storage": {
        "encoding": "inplace",
        "label": "struct StakeManager.DepositInfo",
        "members": [
          {
            "astId": 3611,
            "contract": "contracts/EntryPoint.sol:EntryPoint",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 3613,
            "contract": "contracts/EntryPoint.sol:EntryPoint",
            "label": "unstakeDelaySec",
            "offset": 14,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3615,
            "contract": "contracts/EntryPoint.sol:EntryPoint",
            "label": "withdrawTime",
            "offset": 18,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}